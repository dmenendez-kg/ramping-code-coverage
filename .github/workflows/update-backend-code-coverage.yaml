name: Update backend code coverage

on:
  workflow_call:
    inputs:
      backend-working-directory:
        description: "The path of the backend"
        required: true
        type: string

env:
  CODE_COVERAGE_MODIFIER: 2
  RAMPING_CODE_COVERAGE_CAP: 90

jobs:
  push-updated-coverage-threshold-to-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.backend-working-directory }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Checkout main branch test.config.json
        run: git checkout main -- test.config.json

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "oracle"

      - name: Install xmllint
        run: sudo apt-get install -y libxml2-utils

      - name: Build with Maven
        run: mvn clean verify

      - name: Jacoco Code Coverage
        run: mvn jacoco:report

      - name: Read and print coverage summary
        id: coverage
        run: |
          # Path to the Jacoco report
          report_path="target/site/jacoco/jacoco.xml"

          # Extract the line coverage percentage
          line_coverage=$(xmllint --xpath "string(//report/counter[@type='LINE']/@covered)" $report_path)
          total_lines=$(xmllint --xpath "string(//report/counter[@type='LINE']/@missed)" $report_path)
          total_lines=$((line_coverage + total_lines))
          line_coverage=$((line_coverage * 100 / total_lines))

          # Extract the branch coverage percentage
          branch_coverage=$(xmllint --xpath "string(//report/counter[@type='BRANCH']/@covered)" $report_path)
          total_lines=$(xmllint --xpath "string(//report/counter[@type='BRANCH']/@missed)" $report_path)
          total_lines=$((branch_coverage + total_lines))
          branch_coverage=$((branch_coverage * 100 / total_lines))

          # Extract the instruction coverage percentage
          instruction_coverage=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@covered)" $report_path)
          total_lines=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@missed)" $report_path)
          total_lines=$((instruction_coverage + total_lines))
          instruction_coverage=$((instruction_coverage * 100 / total_lines))

          echo "Line Coverage: $line_coverage%"
          echo "Branch Coverage: $branch_coverage%"
          echo "Instructions Coverage: $instruction_coverage%"

          echo "line_coverage=$line_coverage" >> $GITHUB_OUTPUT
          echo "branch_coverage=$branch_coverage" >> $GITHUB_OUTPUT
          echo "instruction_coverage=$instruction_coverage" >> $GITHUB_OUTPUT

      - name: Print total coverage and threshold
        run: |
          echo "The total line coverage is ${{ steps.coverage.outputs.line_coverage }}%"
          echo "The total branch coverage is ${{ steps.coverage.outputs.branch_coverage }}%"
          echo "The total instruction coverage is ${{ steps.coverage.outputs.instruction_coverage }}%"

      - name: Update coverageThreshold if needed
        run: |
          thresholdFile=test.config.json
          newLineThreshold=$(jq '.coverageThreshold.global.lines = $newVal' --argjson newVal "${{ steps.coverage.outputs.line_coverage }}" $thresholdFile)
          newBranchThreshold=$(jq '.coverageThreshold.global.branches = $newVal' --argjson newVal "${{ steps.coverage.outputs.branch_coverage }}" $thresholdFile)
          newInstructionThreshold=$(jq '.coverageThreshold.global.instructions = $newVal' --argjson newVal "${{ steps.coverage.outputs.instruction_coverage }}" $thresholdFile)
          echo "$newLineThreshold" > $thresholdFile
          echo "$newBranchThreshold" > $thresholdFile
          echo "$newInstructionThreshold" > $thresholdFile
          cat $thresholdFile

      - name: Get GitHub username and email
        id: user_info
        run: |
          echo "GITHUB_USERNAME=${{ github.actor }}" >> $GITHUB_ENV
          git_email=$(git log -1 --pretty=format:'%ae')
          echo "GITHUB_EMAIL=$git_email" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config user.name $GITHUB_USERNAME
          git config user.email $GITHUB_EMAIL

      - name: Commit and push updated test.config.json
        run: |
          git pull
          git add .
          git commit -m "Update test.config.json with new coverage threshold"
          git push origin HEAD:main
